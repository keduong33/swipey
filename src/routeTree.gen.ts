/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AllListsRouteImport } from './routes/all-lists'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ResultResultIdRouteImport } from './routes/result/$resultId'
import { Route as ListUseListIdRouteImport } from './routes/list/use/$listId'
import { Route as ListEditListIdRouteImport } from './routes/list/edit/$listId'

const AllListsRoute = AllListsRouteImport.update({
  id: '/all-lists',
  path: '/all-lists',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ResultResultIdRoute = ResultResultIdRouteImport.update({
  id: '/result/$resultId',
  path: '/result/$resultId',
  getParentRoute: () => rootRouteImport,
} as any)
const ListUseListIdRoute = ListUseListIdRouteImport.update({
  id: '/list/use/$listId',
  path: '/list/use/$listId',
  getParentRoute: () => rootRouteImport,
} as any)
const ListEditListIdRoute = ListEditListIdRouteImport.update({
  id: '/list/edit/$listId',
  path: '/list/edit/$listId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/all-lists': typeof AllListsRoute
  '/result/$resultId': typeof ResultResultIdRoute
  '/list/edit/$listId': typeof ListEditListIdRoute
  '/list/use/$listId': typeof ListUseListIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/all-lists': typeof AllListsRoute
  '/result/$resultId': typeof ResultResultIdRoute
  '/list/edit/$listId': typeof ListEditListIdRoute
  '/list/use/$listId': typeof ListUseListIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/all-lists': typeof AllListsRoute
  '/result/$resultId': typeof ResultResultIdRoute
  '/list/edit/$listId': typeof ListEditListIdRoute
  '/list/use/$listId': typeof ListUseListIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/all-lists'
    | '/result/$resultId'
    | '/list/edit/$listId'
    | '/list/use/$listId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/all-lists'
    | '/result/$resultId'
    | '/list/edit/$listId'
    | '/list/use/$listId'
  id:
    | '__root__'
    | '/'
    | '/all-lists'
    | '/result/$resultId'
    | '/list/edit/$listId'
    | '/list/use/$listId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AllListsRoute: typeof AllListsRoute
  ResultResultIdRoute: typeof ResultResultIdRoute
  ListEditListIdRoute: typeof ListEditListIdRoute
  ListUseListIdRoute: typeof ListUseListIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/all-lists': {
      id: '/all-lists'
      path: '/all-lists'
      fullPath: '/all-lists'
      preLoaderRoute: typeof AllListsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/result/$resultId': {
      id: '/result/$resultId'
      path: '/result/$resultId'
      fullPath: '/result/$resultId'
      preLoaderRoute: typeof ResultResultIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/list/use/$listId': {
      id: '/list/use/$listId'
      path: '/list/use/$listId'
      fullPath: '/list/use/$listId'
      preLoaderRoute: typeof ListUseListIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/list/edit/$listId': {
      id: '/list/edit/$listId'
      path: '/list/edit/$listId'
      fullPath: '/list/edit/$listId'
      preLoaderRoute: typeof ListEditListIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AllListsRoute: AllListsRoute,
  ResultResultIdRoute: ResultResultIdRoute,
  ListEditListIdRoute: ListEditListIdRoute,
  ListUseListIdRoute: ListUseListIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
