/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LogoutRouteImport } from './routes/logout'
import { Route as AllListsRouteImport } from './routes/all-lists'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SessionIndexRouteImport } from './routes/session/index'
import { Route as ListIndexRouteImport } from './routes/list/index'
import { Route as SessionSessionIdRouteImport } from './routes/session/$sessionId'
import { Route as ListUseRouteImport } from './routes/list/use'
import { Route as ListListIdRouteImport } from './routes/list/$listId'
import { Route as AuthedProfileRouteImport } from './routes/_authed/profile'
import { Route as authSignupRouteImport } from './routes/(auth)/signup'
import { Route as authLoginRouteImport } from './routes/(auth)/login'

const LogoutRoute = LogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const AllListsRoute = AllListsRouteImport.update({
  id: '/all-lists',
  path: '/all-lists',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionIndexRoute = SessionIndexRouteImport.update({
  id: '/session/',
  path: '/session/',
  getParentRoute: () => rootRouteImport,
} as any)
const ListIndexRoute = ListIndexRouteImport.update({
  id: '/list/',
  path: '/list/',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionSessionIdRoute = SessionSessionIdRouteImport.update({
  id: '/session/$sessionId',
  path: '/session/$sessionId',
  getParentRoute: () => rootRouteImport,
} as any)
const ListUseRoute = ListUseRouteImport.update({
  id: '/list/use',
  path: '/list/use',
  getParentRoute: () => rootRouteImport,
} as any)
const ListListIdRoute = ListListIdRouteImport.update({
  id: '/list/$listId',
  path: '/list/$listId',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedProfileRoute = AuthedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthedRoute,
} as any)
const authSignupRoute = authSignupRouteImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/all-lists': typeof AllListsRoute
  '/logout': typeof LogoutRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/profile': typeof AuthedProfileRoute
  '/list/$listId': typeof ListListIdRoute
  '/list/use': typeof ListUseRoute
  '/session/$sessionId': typeof SessionSessionIdRoute
  '/list': typeof ListIndexRoute
  '/session': typeof SessionIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/all-lists': typeof AllListsRoute
  '/logout': typeof LogoutRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/profile': typeof AuthedProfileRoute
  '/list/$listId': typeof ListListIdRoute
  '/list/use': typeof ListUseRoute
  '/session/$sessionId': typeof SessionSessionIdRoute
  '/list': typeof ListIndexRoute
  '/session': typeof SessionIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/all-lists': typeof AllListsRoute
  '/logout': typeof LogoutRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/_authed/profile': typeof AuthedProfileRoute
  '/list/$listId': typeof ListListIdRoute
  '/list/use': typeof ListUseRoute
  '/session/$sessionId': typeof SessionSessionIdRoute
  '/list/': typeof ListIndexRoute
  '/session/': typeof SessionIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/all-lists'
    | '/logout'
    | '/login'
    | '/signup'
    | '/profile'
    | '/list/$listId'
    | '/list/use'
    | '/session/$sessionId'
    | '/list'
    | '/session'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/all-lists'
    | '/logout'
    | '/login'
    | '/signup'
    | '/profile'
    | '/list/$listId'
    | '/list/use'
    | '/session/$sessionId'
    | '/list'
    | '/session'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/all-lists'
    | '/logout'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/_authed/profile'
    | '/list/$listId'
    | '/list/use'
    | '/session/$sessionId'
    | '/list/'
    | '/session/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  AllListsRoute: typeof AllListsRoute
  LogoutRoute: typeof LogoutRoute
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
  ListListIdRoute: typeof ListListIdRoute
  ListUseRoute: typeof ListUseRoute
  SessionSessionIdRoute: typeof SessionSessionIdRoute
  ListIndexRoute: typeof ListIndexRoute
  SessionIndexRoute: typeof SessionIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/all-lists': {
      id: '/all-lists'
      path: '/all-lists'
      fullPath: '/all-lists'
      preLoaderRoute: typeof AllListsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/session/': {
      id: '/session/'
      path: '/session'
      fullPath: '/session'
      preLoaderRoute: typeof SessionIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/list/': {
      id: '/list/'
      path: '/list'
      fullPath: '/list'
      preLoaderRoute: typeof ListIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/session/$sessionId': {
      id: '/session/$sessionId'
      path: '/session/$sessionId'
      fullPath: '/session/$sessionId'
      preLoaderRoute: typeof SessionSessionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/list/use': {
      id: '/list/use'
      path: '/list/use'
      fullPath: '/list/use'
      preLoaderRoute: typeof ListUseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/list/$listId': {
      id: '/list/$listId'
      path: '/list/$listId'
      fullPath: '/list/$listId'
      preLoaderRoute: typeof ListListIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/profile': {
      id: '/_authed/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthedProfileRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthedRouteChildren {
  AuthedProfileRoute: typeof AuthedProfileRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedProfileRoute: AuthedProfileRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  AllListsRoute: AllListsRoute,
  LogoutRoute: LogoutRoute,
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
  ListListIdRoute: ListListIdRoute,
  ListUseRoute: ListUseRoute,
  SessionSessionIdRoute: SessionSessionIdRoute,
  ListIndexRoute: ListIndexRoute,
  SessionIndexRoute: SessionIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
